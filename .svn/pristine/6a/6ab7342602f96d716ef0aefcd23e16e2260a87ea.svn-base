<?php
namespace Home\Controller;

use Think\Controller;

class IndexController extends Controller
{
    /*
     *权限管理
     */
    public function __construct()
    {
        parent::__construct();
        $rule_name = MODULE_NAME . '/' . CONTROLLER_NAME . '/' . ACTION_NAME;
        $rabcid    = M('rabc_info')->where($where = array('controller' => $rule_name))->field('id')->find();
        $this->checkRight($rabcid['id']);
    }

    private function checkRight($num)
    {
        $id = cookie('admin_id');
        if ($id == null) {
            //登入超时，无cookie值.
            redirect(U('/home/login/index'));
        } else {
            //拥有权限
            $rabc = M()
                ->table('__ROLEADMIN__ ra')->where($where = array('ra.admin_id' => $id))
                ->join("left join __ROLERABC__ rr on rr.role_id = ra.role_id")
                ->where($where = array('rr.rabc_id' => $num))
                ->field('rr.rabc_id')
                ->find();
            //判断是否拥有权限
            \Think\Log::record(var_export($rabc, true));
            if ($rabc['rabc_id'] == null) {
                $this->error('无权限，无法访问!', U('/home/error/error'), 1);
            }
        }
    }

//主页
    public function index()
    {
        $role_ids = getCurrentUserRoleIds();

        $data = array();
        foreach ($role_ids as $key => $value) {
            $data_menus = M()->table('__RABC_INFO__ c')
                ->join('left join __ROLERABC__ rc on rc.rabc_id = c.id')
                ->where('c.is_menu = 1 and rc.role_id ="' . $value['role_id'] . '"')
                ->field('
                      c.id,
                      c.icon,
                      c.t_id,
                      c.controller,
                      c.controllername
                    ')->select();

            $mapp = $data_menus;
            $temp = $data;
            $data = array_merge_recursive($mapp, $temp);
        }
        $data  = $this->array_unique_fb($data); //数组去重
        $menus = $this->unlimitedForLayer($data);

//        pp($menus);
        $this->assign('menus', $menus);
        $this->display();
    }
// 数组去重
    private function array_unique_fb($array2D)
    {
        foreach ($array2D as $k => $v) {
            $v        = join(',', $v); //降维,也可以用implode,将一维数组转换为用逗号连接的字符串
            $temp[$k] = $v;
        }
        $temp = array_unique($temp); //去掉重复的字符串,也就是重复的一维数组
        foreach ($temp as $k => $v) {
            $array = explode(',', $v); //再将拆开的数组重新组装
            //下面的索引根据自己的情况进行修改即可
            $temp2[$k]['id']             = $array[0];
            $temp2[$k]['icon']           = $array[1];
            $temp2[$k]['t_id']           = $array[2];
            $temp2[$k]['controller']     = $array[3];
            $temp2[$k]['controllername'] = $array[4];
        }
        return $temp2;
    }
    // 递归方法
    private function unlimitedForLayer($cate, $name = 'submenus', $pid = 0)
    {
        $arr = array();
        foreach ($cate as $v) {
            if ($v['t_id'] == $pid) {
                $v[$name] = self::unlimitedForLayer($cate, $name, $v['id']);
                $arr[]    = $v;
            }
        }
        return $arr;
    }
    public function welcome()
    {
       /* set_time_limit(0);
        $st                                    = strtotime(date('Y-m-d')); //今日起始
        $end                                   = strtotime(date('Y-m-d')) + 64000; //今日截止
        $map_cmem_new['create_time']           = array('between', array($st, $end));
        $map_corder_new['create_time']         = array('between', array($st, $end));
        $map_corderprice['o.order_status']     = array('neq', 6);
        $map_corderprice_new['o.create_time']  = array('between', array($st, $end));
        $map_corderprice_new['o.order_status'] = array('neq', 6);
        $map_cgoods_new['add_time']            = array('between', array($st, $end));
        $where_crebate_new['r_status']         = array('neq', 0);
        $where_crebate_new['rebate_time']      = array('between', array($st, $end));

        $data = array(); //要返回的数组

        $cmem            = M('users')->where($where = array('is_delete' => 0))->count(); //会员数
        $corder          = M('order')->where($where = array('is_delete' => 0))->count(); //订单数
        $corderprice_arr = M()->table('__ORDER__ o')
            ->where($map_corderprice)
            ->join('left join __ORDER_GOODS__ og on og.order_id=o.id')
            ->field('sum(og.goods_number*og.pay_price) as corderprice')
            ->group('o.order_status')
            ->select();
        $corderprice         = $corderprice_arr[0]['corderprice']; //订单总金额
        $cgoods              = M('goods')->where($where = array('is_delete' => 0))->count(); //商品数
        $cstore              = M('store')->count(); //药店数
        $cdoctor             = M('doctor')->where($where = array('is_delete' => 0))->count(); //医师总数
        $where['r_status']   = array('neq', 0);
        $crebate_arr         = M('distribution')->where($where)->field('sum(rebate_price) as crebate')->select();
        $crebate             = $crebate_arr[0]['crebate']; //奖金总额
        $cmem_new            = M('users')->where($map_cmem_new)->count(); //今日新增会员数
        $corder_new          = M('order')->where($map_corder_new)->count(); //今日新增订单总数
        $corderprice_arr_new = M()->table('__ORDER__ o')
            ->where($map_corderprice_new)
            ->join('left join __ORDER_GOODS__ og on og.order_id=o.id')
            ->field('sum(og.goods_number*og.pay_price) as corderprice_new')
            ->group('o.order_status')
            ->select();
        $corderprice_new = $corderprice_arr_new[0]['corderprice_new']; //新增订单总额
        $cgoods_new      = M('goods')->where($where = array('is_delete' => 0))->where($map_cgoods_new)->count(); //今日新增商品总数
        $cstore_new      = M('store')->where($map_cmem_new)->count(); //新增药店总数
        $cdoctor_new     = M('doctor')->where($map_cmem_new)->where($where = array('is_delete' => 0))->count(); //新增医师总数
        $crebate_new_arr = M('distribution')->where($where_crebate_new)->field('sum(rebate_price) as crebate_new')->select();
        $crebate_new     = $crebate_new_arr[0]['crebate_new'];

        $data['cmem']            = $cmem;
        $data['corder']          = $corder;
        $data['corderprice']     = $corderprice;
        $data['cgoods']          = $cgoods;
        $data['cstore']          = $cstore;
        $data['cdoctor']         = $cdoctor;
        $data['crebate']         = $crebate;
        $data['cmem_new']        = $cmem_new;
        $data['corder_new']      = $corder_new;
        $data['corderprice_new'] = $corderprice_new;
        $data['cgoods_new']      = $cgoods_new;
        $data['cstore_new']      = $cstore_new;
        $data['cdoctor_new']     = $cdoctor_new;
        $data['$crebate_new']    = $crebate_new;

        $this->assign('data', $data);*/
        $this->display();
    }

}
